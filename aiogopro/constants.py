# Autogenerated by tools.schema.schema_pythonify

from aiogopro.types import StatusType, CommandType


class Status(object):
    class system(object):
        internal_battery_present = StatusType("internal_battery_present", 1)
        internal_battery_level = StatusType("internal_battery_level", 2)
        external_battery_present = StatusType("external_battery_present", 3)
        external_battery_level = StatusType("external_battery_level", 4)
        system_hot = StatusType("system_hot", 6)
        system_busy = StatusType("system_busy", 8)
        quick_capture_active = StatusType("quick_capture_active", 9)
        encoding_active = StatusType("encoding_active", 10)
        lcd_lock_active = StatusType("lcd_lock_active", 11)
        camera_locate_active = StatusType("camera_locate_active", 45)
        current_time_msec = StatusType("current_time_msec", 57)
        next_poll_msec = StatusType("next_poll_msec", 60)
        analytics_ready = StatusType("analytics_ready", 61)
        analytics_size = StatusType("analytics_size", 62)
        in_contextual_menu = StatusType("in_contextual_menu", 63)

    class app(object):
        mode = StatusType("mode", 43)
        sub_mode = StatusType("sub_mode", 44)

    class video(object):
        video_progress_counter = StatusType("video_progress_counter", 13)
        video_protune_default = StatusType("video_protune_default", 46)

    class photo(object):
        photo_protune_default = StatusType("photo_protune_default", 47)

    class multi_shot(object):
        multi_shot_protune_default = StatusType("multi_shot_protune_default", 48)
        multi_shot_count_down = StatusType("multi_shot_count_down", 49)

    class broadcast(object):
        broadcast_progress_counter = StatusType("broadcast_progress_counter", 14)
        broadcast_viewers_count = StatusType("broadcast_viewers_count", 15)
        broadcast_bstatus = StatusType("broadcast_bstatus", 16)

    class wireless(object):
        enable = StatusType("enable", 17)
        state = StatusType("state", 22)
        type = StatusType("type", 20)
        pair_time = StatusType("pair_time", 21)
        scan_time_msec = StatusType("scan_time_msec", 23)
        pairing = StatusType("pairing", 28)
        remote_control_version = StatusType("remote_control_version", 26)
        remote_control_connected = StatusType("remote_control_connected", 27)
        app_count = StatusType("app_count", 31)
        provision_status = StatusType("provision_status", 24)
        wlan_ssid = StatusType("wlan_ssid", 29)
        ap_ssid = StatusType("ap_ssid", 30)
        wifi_bars = StatusType("wifi_bars", 56)

    class stream(object):
        enable = StatusType("enable", 32)
        supported = StatusType("supported", 55)

    class storage(object):
        sd_status = StatusType("sd_status", 33)
        remaining_photos = StatusType("remaining_photos", 34)
        remaining_video_time = StatusType("remaining_video_time", 35)
        num_group_photos = StatusType("num_group_photos", 36)
        num_group_videos = StatusType("num_group_videos", 37)
        num_total_photos = StatusType("num_total_photos", 38)
        num_total_videos = StatusType("num_total_videos", 39)
        remaining_space = StatusType("remaining_space", 54)
        num_hilights = StatusType("num_hilights", 58)
        last_hilight_time_msec = StatusType("last_hilight_time_msec", 59)
        remaining_timelapse_time = StatusType("remaining_timelapse_time", 64)

    class setup(object):
        date_time = StatusType("date_time", 40)

    class fwupdate(object):
        ota_status = StatusType("ota_status", 41)
        download_cancel_request_pending = StatusType("download_cancel_request_pending", 42)

    class liveview(object):
        exposure_select_type = StatusType("exposure_select_type", 65)
        exposure_select_x = StatusType("exposure_select_x", 66)
        exposure_select_y = StatusType("exposure_select_y", 67)


class Command(object):
    GPCAMERA_SHUTTER = CommandType(
        "GPCAMERA_SHUTTER",
        "/command/shutter",
        "button",
        "Start or stop capture")

    GPCAMERA_MODE = CommandType(
        "GPCAMERA_MODE",
        "/command/mode",
        "button",
        "Set Mode")

    GPCAMERA_SUBMODE = CommandType(
        "GPCAMERA_SUBMODE",
        "/command/sub_mode",
        "button",
        "Set Mode and Sub-Mode")

    GPCAMERA_POWER_ID = CommandType(
        "GPCAMERA_POWER_ID",
        "/command/system/sleep",
        "button",
        "Power Off Camera")

    GPCAMERA_FWUPDATE_DOWNLOAD_FILE = CommandType(
        "GPCAMERA_FWUPDATE_DOWNLOAD_FILE",
        "",
        "button",
        "Perform FW Update File Download")

    GPCAMERA_FWUPDATE_DOWNLOAD_START = CommandType(
        "GPCAMERA_FWUPDATE_DOWNLOAD_START",
        "/command/fwupdate/download/start",
        "button",
        "Notify start FW Update File Download")

    GPCAMERA_FWUPDATE_DOWNLOAD_DONE = CommandType(
        "GPCAMERA_FWUPDATE_DOWNLOAD_DONE",
        "/command/fwupdate/download/done",
        "button",
        "Notify completion of FW Update File Download")

    GPCAMERA_FWUPDATE_DOWNLOAD_CANCEL = CommandType(
        "GPCAMERA_FWUPDATE_DOWNLOAD_CANCEL",
        "/command/fwupdate/download/cancel",
        "button",
        "Cancel FW Update File Download")

    GPCAMERA_FACTORY_RESET = CommandType(
        "GPCAMERA_FACTORY_RESET",
        "/command/system/factory/reset",
        "button",
        "Reset to Factory Defaults")

    GPCAMERA_SLEEP = CommandType(
        "GPCAMERA_SLEEP",
        "/command/system/sleep",
        "button",
        "Power Saving Sleep Mode")

    GPCAMERA_USE_CURRENT_WIRELESS_REMOTE_ID = CommandType(
        "GPCAMERA_USE_CURRENT_WIRELESS_REMOTE_ID",
        "/setting/63/2",
        "button",
        "Use with Current Wi-Fi Remote")

    GPCAMERA_USE_NEW_WIRELESS_REMOTE_ID = CommandType(
        "GPCAMERA_USE_NEW_WIRELESS_REMOTE_ID",
        "/command/wireless/rc/pair",
        "button",
        "Use with New Wi-Fi Remote")

    GPCAMERA_CANCEL_PAIR_WIRELESS_REMOTE_ID = CommandType(
        "GPCAMERA_CANCEL_PAIR_WIRELESS_REMOTE_ID",
        "/command/wireless/rc/pair/cancel",
        "button",
        "Cancel pairing of new Wi-Fi Remote")

    GPCAMERA_CANCEL_PAIR_WIRELESS_ID = CommandType(
        "GPCAMERA_CANCEL_PAIR_WIRELESS_ID",
        "/command/wireless/pair/cancel",
        "button",
        "Cancel pairing if already paired")

    GPCAMERA_VIDEO_PROTUNE_RESET_TO_DEFAULT = CommandType(
        "GPCAMERA_VIDEO_PROTUNE_RESET_TO_DEFAULT",
        "/command/video/protune/reset",
        "button",
        "Reset Protune")

    GPCAMERA_MULTISHOT_PROTUNE_RESET_TO_DEFAULT = CommandType(
        "GPCAMERA_MULTISHOT_PROTUNE_RESET_TO_DEFAULT",
        "/command/multi_shot/protune/reset",
        "button",
        "Reset Protune")

    GPCAMERA_PHOTO_PROTUNE_RESET_TO_DEFAULT = CommandType(
        "GPCAMERA_PHOTO_PROTUNE_RESET_TO_DEFAULT",
        "/command/photo/protune/reset",
        "button",
        "Reset Protune")

    GPCAMERA_SET_DATE_AND_TIME_ID = CommandType(
        "GPCAMERA_SET_DATE_AND_TIME_ID",
        "/command/setup/date_time",
        "button",
        "Set Date and Time")

    GPCAMERA_DELETE_LAST_FILE_ID = CommandType(
        "GPCAMERA_DELETE_LAST_FILE_ID",
        "/command/storage/delete/last",
        "button",
        "Delete Last File")

    GPCAMERA_DELETE_ALL_FILES_ID = CommandType(
        "GPCAMERA_DELETE_ALL_FILES_ID",
        "/command/storage/delete/all",
        "button",
        "Delete All Files from SD Card")

    GPCAMERA_DELETE_FILE_ID = CommandType(
        "GPCAMERA_DELETE_FILE_ID",
        "/command/storage/delete",
        "button",
        "Delete File")

    GPCAMERA_DELETE_FILE_GROUP = CommandType(
        "GPCAMERA_DELETE_FILE_GROUP",
        "",
        "button",
        "Delete File Group")

    GPCAMERA_DELETE_FILE_ID_V2 = CommandType(
        "GPCAMERA_DELETE_FILE_ID_V2",
        "/command/storage/delete",
        "button",
        "Delete File")

    GPCAMERA_LOCATE_ID = CommandType(
        "GPCAMERA_LOCATE_ID",
        "/command/system/locate",
        "toggle",
        "Locate Camera")

    GPCAMERA_NETWORK_NAME_ID = CommandType(
        "GPCAMERA_NETWORK_NAME_ID",
        "/command/wireless/ap/ssid",
        "text",
        "Name")

    GPCAMERA_INFO_VERSION_ID = CommandType(
        "GPCAMERA_INFO_VERSION_ID",
        "camera_version",
        "readonly",
        "Version")

    GPCAMERA_NETWORK_VERSION_ID = CommandType(
        "GPCAMERA_NETWORK_VERSION_ID",
        "bacpac_version",
        "readonly",
        "Version")

    GPCAMERA_BATTERY_LEVEL_ID = CommandType(
        "GPCAMERA_BATTERY_LEVEL_ID",
        "camera_battery",
        "readonly",
        "Battery Level")

    GPCAMERA_SDCARD_CAPACITY_ID = CommandType(
        "GPCAMERA_SDCARD_CAPACITY_ID",
        "sd_card",
        "child",
        "SD Card Capacity")

    GPCAMERA_TAG_MOMENT = CommandType(
        "GPCAMERA_TAG_MOMENT",
        "/command/storage/tag_moment",
        "button",
        "Tag Moment")

    GPCAMERA_RC_PAIR = CommandType(
        "GPCAMERA_RC_PAIR",
        "/command/rc/pair",
        "button",
        "Pair with Known RC")

    GPCAMERA_SSID_SCAN = CommandType(
        "GPCAMERA_SSID_SCAN",
        "/command/wireless/ssid/scan",
        "button",
        "Start Wi-Fi SSID Scan")

    GPCAMERA_SSID_LIST = CommandType(
        "GPCAMERA_SSID_LIST",
        "/command/wireless/ssid/list",
        "button",
        "Wi-Fi SSID Scan Results")

    GPCAMERA_SSID_SELECT = CommandType(
        "GPCAMERA_SSID_SELECT",
        "/command/wireless/ssid/select",
        "button",
        "Connect to Wi-Fi SSID")

    GPCAMERA_SSID_DELETE = CommandType(
        "GPCAMERA_SSID_DELETE",
        "/command/wireless/ssid/delete",
        "button",
        "Delete Wi-Fi SSID from Known List")

    GPCAMERA_SSID_SAVE = CommandType(
        "GPCAMERA_SSID_SAVE",
        "/command/wireless/ssid/save",
        "button",
        "Save Wi-Fi SSID to Known List")

    GPCAMERA_ANALYTICS_FILE_GET = CommandType(
        "GPCAMERA_ANALYTICS_FILE_GET",
        "/gp/gpControl/analytics/get",
        "button",
        "Acquire the analytics file as an octet-stream")

    GPCAMERA_ANALYTICS_FILE_CLEAR = CommandType(
        "GPCAMERA_ANALYTICS_FILE_CLEAR",
        "/gp/gpControl/analytics/clear",
        "button",
        "Remove analytics file and clear analytics log")

    GPCAMERA_MEDIA_LIST = CommandType(
        "GPCAMERA_MEDIA_LIST",
        "/gp/gpMediaList",
        "button",
        "Supports listing of media on SD card")

    GPCAMERA_MEDIA_METADATA = CommandType(
        "GPCAMERA_MEDIA_METADATA",
        "/gp/gpMediaMetadata",
        "button",
        "Supports extraction of metadata from a particular media file")

    GPCAMERA_HILIGHT_ADD_VIDEO_PLAYBACK_MOMENT = CommandType(
        "GPCAMERA_HILIGHT_ADD_VIDEO_PLAYBACK_MOMENT",
        "",
        "button",
        "HiLight moment during a video playback")

    GPCAMERA_HILIGHT_REMOVE_VIDEO_PLAYBACK_MOMENT = CommandType(
        "GPCAMERA_HILIGHT_REMOVE_VIDEO_PLAYBACK_MOMENT",
        "",
        "button",
        "Remove HiLight moment during a video playback")

    GPCAMERA_INFO = CommandType(
        "GPCAMERA_INFO",
        "",
        "button",
        "Get the camera info")

    GPCAMERA_PREVIEW_ENABLED = CommandType(
        "GPCAMERA_PREVIEW_ENABLED",
        "",
        "button",
        "Camera preview feature")

    GPCAMERA_PREVIEW = CommandType(
        "GPCAMERA_PREVIEW",
        "",
        "button",
        "Camera preview")

    GPCAMERA_PREVIEW_V2 = CommandType(
        "GPCAMERA_PREVIEW_V2",
        "",
        "button",
        "Camera preview v2")

    GPCAMERA_PREVIEW_LEGACY = CommandType(
        "GPCAMERA_PREVIEW_LEGACY",
        "",
        "button",
        "Camera preview")

    GPCAMERA_SET_WIFI_CONFIG = CommandType(
        "GPCAMERA_SET_WIFI_CONFIG",
        "",
        "button",
        "Change wifi configuration")

    GPCAMERA_GET_WIFI_CONFIG = CommandType(
        "GPCAMERA_GET_WIFI_CONFIG",
        "",
        "button",
        "Get wifi configuration")

    GPCAMERA_CHANGE_SETTING = CommandType(
        "GPCAMERA_CHANGE_SETTING",
        "",
        "button",
        "Change a setting")

    GPCAMERA_SENSOR_PAIRING_AVAILABLE = CommandType(
        "GPCAMERA_SENSOR_PAIRING_AVAILABLE",
        "",
        "button",
        "Get the pairing availability status")

    GPCAMERA_SENSOR_SET_PAIRING_PHASE = CommandType(
        "GPCAMERA_SENSOR_SET_PAIRING_PHASE",
        "",
        "button",
        "Enter or exit pairing phase")

    GPCAMERA_SENSOR_SET_AUTOCONNECT = CommandType(
        "GPCAMERA_SENSOR_SET_AUTOCONNECT",
        "",
        "button",
        "Set the auto-connect state of the camera")

    GPCAMERA_SENSOR_GET_AUTOCONNECT = CommandType(
        "GPCAMERA_SENSOR_GET_AUTOCONNECT",
        "",
        "button",
        "Get the auto-connect state of the camera")

    GPCAMERA_SENSOR_SCAN = CommandType(
        "GPCAMERA_SENSOR_SCAN",
        "",
        "button",
        "Scan for sensors")

    GPCAMERA_SENSOR_GET_SCAN_RESULTS = CommandType(
        "GPCAMERA_SENSOR_GET_SCAN_RESULTS",
        "",
        "button",
        "Get the scan result ")

    GPCAMERA_SENSOR_PAIR_START = CommandType(
        "GPCAMERA_SENSOR_PAIR_START",
        "",
        "button",
        "Pair the sensor")

    GPCAMERA_SENSOR_PAIR_STOP = CommandType(
        "GPCAMERA_SENSOR_PAIR_STOP",
        "",
        "button",
        "Stop pairing of the sensor")

    GPCAMERA_SENSOR_GET_PAIR_STATUS = CommandType(
        "GPCAMERA_SENSOR_GET_PAIR_STATUS",
        "",
        "button",
        "Get the sensor pairing status")

    GPCAMERA_SENSOR_WHITELIST = CommandType(
        "GPCAMERA_SENSOR_WHITELIST",
        "",
        "button",
        "Get the whitelist of sensors")

    GPCAMERA_SENSOR_WHITELIST_DEVICE_INFO = CommandType(
        "GPCAMERA_SENSOR_WHITELIST_DEVICE_INFO",
        "",
        "button",
        "Get the whitelist info for a single sensor")

    GPCAMERA_SENSOR_WHITELIST_CONFIGURE = CommandType(
        "GPCAMERA_SENSOR_WHITELIST_CONFIGURE",
        "",
        "button",
        "Configure a whitelisted sensor")

    GPCAMERA_SENSOR_WHITELIST_REMOVE = CommandType(
        "GPCAMERA_SENSOR_WHITELIST_REMOVE",
        "",
        "button",
        "Remove a sensor from the whitelist")

    GPCAMERA_GENERIC = CommandType(
        "GPCAMERA_GENERIC",
        "",
        "button",
        "Generic command")

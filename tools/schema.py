from aiogopro.types import CommandType, StatusType, ModeType


class SchemaType(object):
    def __init__(self, schema_version, version):
        self.schema_version = schema_version
        self.version = version
        self.commands = {}
        self.modes = {}
        self.status = {}

    def addCommand(self, cmd):
        if 'wifi' not in cmd['network_types']:
            return

        key = cmd['key']
        self.commands[key] = CommandType(
            key,
            cmd['url'],
            cmd['widget_type'],
            cmd['display_name']
        )

    def addMode(self, mode):
        key = mode['path_segment']
        self.modes[key] = ModeType(key, mode['value'], mode['display_name'])

    def addStatus(self, groupname, field):
        group = self.status.get(groupname, {})
        group[field['name']] = StatusType(**field)

        self.status[groupname] = group

    @staticmethod
    def parse(data):
        parser = SchemaType(data['schema_version'], data['version'])
        for cmd in data['commands']:
            parser.addCommand(cmd)

        for mode in data['modes']:
            parser.addMode(mode)

        for group in data['status']['groups']:
            for field in group['fields']:
                parser.addStatus(group['group'], field)

        return parser


def schema_pythonify(schema, filename):
    header = [
        '# Autogenerated by {0}.schema_pythonify\n'.format(__name__)]

    types = []

    # Status options
    types.append('StatusType')
    status = ['\n\n']
    status.append('class Status(object):')
    extra = ''
    for groupname in schema.status.keys():
        status.append('{1}    class {0}(object):'.format(groupname, extra))
        for key, field in schema.status[groupname].items():
            status.append('        {0} = StatusType("{0}", {1})'.format(field.name, field.id))
        extra = '\n'

    # Commands
    types.append('CommandType')
    command = ['\n\n']
    extra = False
    command.append('class Command(object):')
    for key, cmd in schema.commands.items():
        if extra:
            command.append('')
        extra = True
        command.append('    {0} = CommandType(\n        "{0}",\n        "{1}",\n        "{2}",\n        "{3}")'.format(
            cmd.name,
            cmd.url,
            cmd.widget,
            cmd.display_name
        ))

    # finalize
    lines = []
    header.append("from aiogopro.types import {0}".format(", ".join(types)))
    lines.append("\n".join(header))
    lines.append("\n".join(status))
    lines.append("\n".join(command))
    lines.append("\n")
    with open(filename, 'w') as f:
        f.writelines(lines)


def command_compare(firsts, seconds, firstname='first', secondname='second'):
    for key, cmdA in firsts.items():
        if key in seconds:
            cmdB = seconds[key]
            if cmdA.url != cmdB.url:
                print("Same command {0} different url {1} != {2} ({3}/{4})".format(cmdA.url, cmdB.url, firstname, secondname))
        else:
            print('Only in {2}, Command {0}: {1}'.format(cmdA.name.ljust(47), cmdA.display_name, firstname))


def mode_compare(firsts, seconds, firstname='first', secondname='last'):
    for key, modeA in firsts.items():
        if key in seconds:
            modeB = seconds[key]
            if (modeA.value != modeB.value):
                print("Same mode {0} different value {1} != {2} ({3}/{4})".format(modeA.value, modeB.value, firstname, secondname))
        else:
            print('Only in {2}, Mode {0}: {1}'.format(modeA.name.ljust(20), modeA.display_name, firstname))


def status_compare(groupname, firsts, seconds, firstname='first', secondname='second'):
    for key, statusA in firsts.items():
        if key in seconds:
            statusB = seconds[key]
            if (statusA.id != statusB.id):
                print("Same status {0}.{1} different id {2} != {3} ({4}/{5})".format(
                    groupname, key, statusA.id, statusB.id, firstname, secondname))
        else:
            print('Only in {3}, Status {0}.{1}: {2}'.format(groupname, statusA.name.ljust(47), statusA.id, firstname))


def schema_compare(first, second, firstname='first', secondname='second'):
    command_compare(first.commands, second.commands, firstname, secondname)
    command_compare(second.commands, first.commands, secondname, firstname)
    mode_compare(first.modes, second.modes, firstname, secondname)
    mode_compare(second.modes, first.modes, secondname, firstname)

    for groupname in first.status.keys():
        status_compare(groupname, first.status[groupname], second.status, firstname, secondname)
        status_compare(groupname, second.status[groupname], first.status, secondname, firstname)

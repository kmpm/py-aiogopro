# Autogenerated by tools.schema.schema_pythonify at 2019-01-30 11:28:42.915189

from enum import Enum
from aiogopro.types import StatusType, CommandType


class Status(object):
    class App(object):
        mode = StatusType("mode", 43)
        sub_mode = StatusType("sub_mode", 44)
        video_selected_flatmode = StatusType("video_selected_flatmode", 71)
        photo_selected_flatmode = StatusType("photo_selected_flatmode", 72)
        timelapse_selected_flatmode = StatusType("timelapse_selected_flatmode", 73)
        digital_zoom = StatusType("digital_zoom", 75)
        capture_delay = StatusType("capture_delay", 84)

    class Broadcast(object):
        broadcast_progress_counter = StatusType("broadcast_progress_counter", 14)
        broadcast_viewers_count = StatusType("broadcast_viewers_count", 15)
        broadcast_bstatus = StatusType("broadcast_bstatus", 16)

    class Fwupdate(object):
        ota_status = StatusType("ota_status", 41)
        download_cancel_request_pending = StatusType("download_cancel_request_pending", 42)

    class Liveview(object):
        exposure_select_type = StatusType("exposure_select_type", 65)
        exposure_select_x = StatusType("exposure_select_x", 66)
        exposure_select_y = StatusType("exposure_select_y", 67)

    class MultiShot(object):
        multi_shot_protune_default = StatusType("multi_shot_protune_default", 48)
        multi_shot_count_down = StatusType("multi_shot_count_down", 49)

    class Photo(object):
        photo_protune_default = StatusType("photo_protune_default", 47)

    class Setup(object):
        date_time = StatusType("date_time", 40)

    class Storage(object):
        sd_status = StatusType("sd_status", 33)
        remaining_photos = StatusType("remaining_photos", 34)
        remaining_video_time = StatusType("remaining_video_time", 35)
        num_group_photos = StatusType("num_group_photos", 36)
        num_group_videos = StatusType("num_group_videos", 37)
        num_total_photos = StatusType("num_total_photos", 38)
        num_total_videos = StatusType("num_total_videos", 39)
        remaining_space = StatusType("remaining_space", 54)
        num_hilights = StatusType("num_hilights", 58)
        last_hilight_time_msec = StatusType("last_hilight_time_msec", 59)
        remaining_timelapse_time = StatusType("remaining_timelapse_time", 64)

    class Stream(object):
        enable = StatusType("enable", 32)
        supported = StatusType("supported", 55)

    class System(object):
        internal_battery_present = StatusType("internal_battery_present", 1)
        internal_battery_level = StatusType("internal_battery_level", 2)
        external_battery_present = StatusType("external_battery_present", 3)
        external_battery_level = StatusType("external_battery_level", 4)
        system_hot = StatusType("system_hot", 6)
        system_busy = StatusType("system_busy", 8)
        quick_capture_active = StatusType("quick_capture_active", 9)
        encoding_active = StatusType("encoding_active", 10)
        lcd_lock_active = StatusType("lcd_lock_active", 11)
        camera_locate_active = StatusType("camera_locate_active", 45)
        current_time_msec = StatusType("current_time_msec", 57)
        next_poll_msec = StatusType("next_poll_msec", 60)
        analytics_ready = StatusType("analytics_ready", 61)
        analytics_size = StatusType("analytics_size", 62)
        in_contextual_menu = StatusType("in_contextual_menu", 63)
        gps_status = StatusType("gps_status", 68)
        internal_battery_percentage = StatusType("internal_battery_percentage", 70)
        acc_mic_status = StatusType("acc_mic_status", 74)
        digital_zoom_active = StatusType("digital_zoom_active", 77)
        mobile_friendly_video = StatusType("mobile_friendly_video", 78)
        first_time_use = StatusType("first_time_use", 79)
        system_ready = StatusType("system_ready", 82)
        batt_okay_for_ota = StatusType("batt_okay_for_ota", 83)
        video_low_temp_alert = StatusType("video_low_temp_alert", 85)
        actual_orientation = StatusType("actual_orientation", 86)

    class Video(object):
        video_progress_counter = StatusType("video_progress_counter", 13)
        video_protune_default = StatusType("video_protune_default", 46)
        zoom_while_encoding = StatusType("zoom_while_encoding", 88)

    class Wireless(object):
        enable = StatusType("enable", 17)
        state = StatusType("state", 22)
        wireless_type = StatusType("type", 20)
        pair_time = StatusType("pair_time", 21)
        scan_time_msec = StatusType("scan_time_msec", 23)
        provision_status = StatusType("provision_status", 24)
        remote_control_version = StatusType("remote_control_version", 26)
        remote_control_connected = StatusType("remote_control_connected", 27)
        pairing = StatusType("pairing", 28)
        wlan_ssid = StatusType("wlan_ssid", 29)
        ap_ssid = StatusType("ap_ssid", 30)
        app_count = StatusType("app_count", 31)
        wifi_bars = StatusType("wifi_bars", 56)
        ap_state = StatusType("ap_state", 69)
        wireless_band = StatusType("wireless_band", 76)
        band_5GHz_avail = StatusType("band_5GHz_avail", 81)


class Command(object):
    GPCAMERA_ANALYTICS_FILE_CLEAR = CommandType(
        "GPCAMERA_ANALYTICS_FILE_CLEAR",
        "/gp/gpControl/analytics/clear",
        "button",
        "Remove analytics file and clear analytics log")

    GPCAMERA_ANALYTICS_FILE_GET = CommandType(
        "GPCAMERA_ANALYTICS_FILE_GET",
        "/gp/gpControl/analytics/get",
        "button",
        "Acquire the analytics file as an octet-stream")

    GPCAMERA_ANALYTICS_SET_CLIENT_INFO = CommandType(
        "GPCAMERA_ANALYTICS_SET_CLIENT_INFO",
        "",
        "button",
        "Set the client app info for analytics")

    GPCAMERA_APP_POWER_ON_START = CommandType(
        "GPCAMERA_APP_POWER_ON_START",
        "",
        "button",
        "Notifies the camera that an app powered it on")

    GPCAMERA_BATTERY_LEVEL_ID = CommandType(
        "GPCAMERA_BATTERY_LEVEL_ID",
        "camera_battery",
        "readonly",
        "Battery Level")

    GPCAMERA_CANCEL_PAIR_WIRELESS_ID = CommandType(
        "GPCAMERA_CANCEL_PAIR_WIRELESS_ID",
        "/command/wireless/pair/cancel",
        "button",
        "Cancel pairing if already paired")

    GPCAMERA_CANCEL_PAIR_WIRELESS_REMOTE_ID = CommandType(
        "GPCAMERA_CANCEL_PAIR_WIRELESS_REMOTE_ID",
        "/command/wireless/rc/pair/cancel",
        "button",
        "Cancel pairing of new Wi-Fi Remote")

    GPCAMERA_CHANGE_SETTING = CommandType(
        "GPCAMERA_CHANGE_SETTING",
        "",
        "button",
        "Change a setting")

    GPCAMERA_DELETE_ALL_FILES_ID = CommandType(
        "GPCAMERA_DELETE_ALL_FILES_ID",
        "/command/storage/delete/all",
        "button",
        "Delete All Files from SD Card")

    GPCAMERA_DELETE_FILE_GROUP = CommandType(
        "GPCAMERA_DELETE_FILE_GROUP",
        "",
        "button",
        "Delete File Group")

    GPCAMERA_DELETE_FILE_ID = CommandType(
        "GPCAMERA_DELETE_FILE_ID",
        "/command/storage/delete",
        "button",
        "Delete File")

    GPCAMERA_DELETE_FILE_ID_V3 = CommandType(
        "GPCAMERA_DELETE_FILE_ID_V3",
        "",
        "button",
        "Delete File")

    GPCAMERA_DELETE_LAST_FILE_ID = CommandType(
        "GPCAMERA_DELETE_LAST_FILE_ID",
        "/command/storage/delete/last",
        "button",
        "Delete Last File")

    GPCAMERA_DIGITAL_ZOOM_SET = CommandType(
        "GPCAMERA_DIGITAL_ZOOM_SET",
        "/command/digital_zoom",
        "button",
        "Change digital zoom config")

    GPCAMERA_EXPOSURE_SELECT_RESET = CommandType(
        "GPCAMERA_EXPOSURE_SELECT_RESET",
        "",
        "button",
        "Set Exposure Select back to default value")

    GPCAMERA_EXPOSURE_SELECT_SET = CommandType(
        "GPCAMERA_EXPOSURE_SELECT_SET",
        "",
        "button",
        "Set a new value for Exposure Select")

    GPCAMERA_FACTORY_RESET = CommandType(
        "GPCAMERA_FACTORY_RESET",
        "/command/system/factory/reset",
        "button",
        "Reset to Factory Defaults")

    GPCAMERA_FWUPDATE_DOWNLOAD_CANCEL = CommandType(
        "GPCAMERA_FWUPDATE_DOWNLOAD_CANCEL",
        "/command/fwupdate/download/cancel",
        "button",
        "Cancel FW Update File Download")

    GPCAMERA_FWUPDATE_DOWNLOAD_DONE = CommandType(
        "GPCAMERA_FWUPDATE_DOWNLOAD_DONE",
        "/command/fwupdate/download/done",
        "button",
        "Notify completion of FW Update File Download")

    GPCAMERA_FWUPDATE_DOWNLOAD_FILE = CommandType(
        "GPCAMERA_FWUPDATE_DOWNLOAD_FILE",
        "",
        "button",
        "Perform FW Update File Download")

    GPCAMERA_FWUPDATE_DOWNLOAD_START = CommandType(
        "GPCAMERA_FWUPDATE_DOWNLOAD_START",
        "/command/fwupdate/download/start",
        "button",
        "Notify start FW Update File Download")

    GPCAMERA_GENERIC = CommandType(
        "GPCAMERA_GENERIC",
        "",
        "button",
        "Generic command")

    GPCAMERA_GET_WIFI_CONFIG = CommandType(
        "GPCAMERA_GET_WIFI_CONFIG",
        "",
        "button",
        "Get wifi configuration")

    GPCAMERA_HILIGHT_ADD_PHOTO_MOMENT = CommandType(
        "GPCAMERA_HILIGHT_ADD_PHOTO_MOMENT",
        "",
        "button",
        "HiLight moment for a photo")

    GPCAMERA_HILIGHT_ADD_VIDEO_PLAYBACK_MOMENT = CommandType(
        "GPCAMERA_HILIGHT_ADD_VIDEO_PLAYBACK_MOMENT",
        "",
        "button",
        "HiLight moment during a video playback")

    GPCAMERA_HILIGHT_REMOVE_PHOTO_MOMENT = CommandType(
        "GPCAMERA_HILIGHT_REMOVE_PHOTO_MOMENT",
        "",
        "button",
        "Remove HiLight moment for a photo")

    GPCAMERA_HILIGHT_REMOVE_VIDEO_PLAYBACK_MOMENT = CommandType(
        "GPCAMERA_HILIGHT_REMOVE_VIDEO_PLAYBACK_MOMENT",
        "",
        "button",
        "Remove HiLight moment during a video playback")

    GPCAMERA_INFO = CommandType(
        "GPCAMERA_INFO",
        "",
        "button",
        "Get the camera info")

    GPCAMERA_INFO_VERSION_ID = CommandType(
        "GPCAMERA_INFO_VERSION_ID",
        "camera_version",
        "readonly",
        "Version")

    GPCAMERA_LOCATE_ID = CommandType(
        "GPCAMERA_LOCATE_ID",
        "/command/system/locate",
        "toggle",
        "Locate Camera")

    GPCAMERA_MEDIA_GET_AUDIO_TRACK = CommandType(
        "GPCAMERA_MEDIA_GET_AUDIO_TRACK",
        "",
        "button",
        "Get the audio track from video")

    GPCAMERA_MEDIA_GET_GLOBAL_GPMF = CommandType(
        "GPCAMERA_MEDIA_GET_GLOBAL_GPMF",
        "",
        "button",
        "Get global GPMF for a media")

    GPCAMERA_MEDIA_GET_TELEMETRY_TRACK = CommandType(
        "GPCAMERA_MEDIA_GET_TELEMETRY_TRACK",
        "",
        "button",
        "Get the telemetry track from video")

    GPCAMERA_MEDIA_LIST = CommandType(
        "GPCAMERA_MEDIA_LIST",
        "/gp/gpMediaList",
        "button",
        "Supports listing of media on SD card")

    GPCAMERA_MEDIA_LIST_V4 = CommandType(
        "GPCAMERA_MEDIA_LIST_V4",
        "",
        "button",
        "Supports listing of media on SD card.  Includes metadata session files.")

    GPCAMERA_MEDIA_METADATA = CommandType(
        "GPCAMERA_MEDIA_METADATA",
        "/gp/gpMediaMetadata",
        "button",
        "Supports extraction of metadata from a particular media file")

    GPCAMERA_MEDIA_METADATA_V4 = CommandType(
        "GPCAMERA_MEDIA_METADATA_V4",
        "",
        "button",
        "Supports extraction of additional metadata")

    GPCAMERA_MEDIA_METADATA_V5 = CommandType(
        "GPCAMERA_MEDIA_METADATA_V5",
        "",
        "button",
        "Supports extraction of additional metadata")

    GPCAMERA_MEDIA_SELECTIVE_OFFLOAD = CommandType(
        "GPCAMERA_MEDIA_SELECTIVE_OFFLOAD",
        "",
        "button",
        "Indicates that the camera supports selective offload")

    GPCAMERA_MOBILE_OFFLOAD_GET_STATE = CommandType(
        "GPCAMERA_MOBILE_OFFLOAD_GET_STATE",
        "",
        "button",
        "Get the mobile offload state")

    GPCAMERA_MOBILE_OFFLOAD_NEW_MEDIA_FLAG_CLEAR = CommandType(
        "GPCAMERA_MOBILE_OFFLOAD_NEW_MEDIA_FLAG_CLEAR",
        "",
        "button",
        "Clear the new media flag")

    GPCAMERA_MOBILE_OFFLOAD_POWER_ON_START = CommandType(
        "GPCAMERA_MOBILE_OFFLOAD_POWER_ON_START",
        "",
        "button",
        "Notifies the camera that mobile offload started from a powered off state")

    GPCAMERA_MOBILE_OFFLOAD_START = CommandType(
        "GPCAMERA_MOBILE_OFFLOAD_START",
        "",
        "button",
        "Notifies the camera that mobile offload started")

    GPCAMERA_MOBILE_OFFLOAD_STOP = CommandType(
        "GPCAMERA_MOBILE_OFFLOAD_STOP",
        "",
        "button",
        "Notifies the camera that mobile offload stopped")

    GPCAMERA_MODE = CommandType(
        "GPCAMERA_MODE",
        "/command/mode",
        "button",
        "Set Mode")

    GPCAMERA_MULTISHOT_PROTUNE_RESET_TO_DEFAULT = CommandType(
        "GPCAMERA_MULTISHOT_PROTUNE_RESET_TO_DEFAULT",
        "/command/multi_shot/protune/reset",
        "button",
        "Reset Protune")

    GPCAMERA_NETWORK_NAME_ID = CommandType(
        "GPCAMERA_NETWORK_NAME_ID",
        "/command/wireless/ap/ssid",
        "text",
        "Name")

    GPCAMERA_NETWORK_VERSION_ID = CommandType(
        "GPCAMERA_NETWORK_VERSION_ID",
        "bacpac_version",
        "readonly",
        "Version")

    GPCAMERA_PHOTO_PROTUNE_RESET_TO_DEFAULT = CommandType(
        "GPCAMERA_PHOTO_PROTUNE_RESET_TO_DEFAULT",
        "/command/photo/protune/reset",
        "button",
        "Reset Protune")

    GPCAMERA_POWER_ID = CommandType(
        "GPCAMERA_POWER_ID",
        "/command/system/sleep",
        "button",
        "Power Off Camera")

    GPCAMERA_PREVIEW = CommandType(
        "GPCAMERA_PREVIEW",
        "",
        "button",
        "Camera preview")

    GPCAMERA_PREVIEW_ENABLED = CommandType(
        "GPCAMERA_PREVIEW_ENABLED",
        "",
        "button",
        "Camera preview feature")

    GPCAMERA_PREVIEW_LEGACY = CommandType(
        "GPCAMERA_PREVIEW_LEGACY",
        "",
        "button",
        "Camera preview")

    GPCAMERA_PREVIEW_V2 = CommandType(
        "GPCAMERA_PREVIEW_V2",
        "",
        "button",
        "Camera preview v2")

    GPCAMERA_PREVIEW_V3 = CommandType(
        "GPCAMERA_PREVIEW_V3",
        "",
        "button",
        "Camera preview v3")

    GPCAMERA_RC_PAIR = CommandType(
        "GPCAMERA_RC_PAIR",
        "/command/rc/pair",
        "button",
        "Pair with Known RC")

    GPCAMERA_SDCARD_CAPACITY_ID = CommandType(
        "GPCAMERA_SDCARD_CAPACITY_ID",
        "sd_card",
        "child",
        "SD Card Capacity")

    GPCAMERA_SDCARD_GET_ID = CommandType(
        "GPCAMERA_SDCARD_GET_ID",
        "",
        "button",
        "Get SDCard's unique identifier")

    GPCAMERA_SENSOR_GET_AUTOCONNECT = CommandType(
        "GPCAMERA_SENSOR_GET_AUTOCONNECT",
        "",
        "button",
        "Get the auto-connect state of the camera")

    GPCAMERA_SENSOR_GET_PAIR_STATUS = CommandType(
        "GPCAMERA_SENSOR_GET_PAIR_STATUS",
        "",
        "button",
        "Get the sensor pairing status")

    GPCAMERA_SENSOR_GET_SCAN_RESULTS = CommandType(
        "GPCAMERA_SENSOR_GET_SCAN_RESULTS",
        "",
        "button",
        "Get the scan result")

    GPCAMERA_SENSOR_PAIRING_AVAILABLE = CommandType(
        "GPCAMERA_SENSOR_PAIRING_AVAILABLE",
        "",
        "button",
        "Get the pairing availability status")

    GPCAMERA_SENSOR_PAIR_START = CommandType(
        "GPCAMERA_SENSOR_PAIR_START",
        "",
        "button",
        "Pair the sensor")

    GPCAMERA_SENSOR_PAIR_STOP = CommandType(
        "GPCAMERA_SENSOR_PAIR_STOP",
        "",
        "button",
        "Stop pairing of the sensor")

    GPCAMERA_SENSOR_SCAN = CommandType(
        "GPCAMERA_SENSOR_SCAN",
        "",
        "button",
        "Scan for sensors")

    GPCAMERA_SENSOR_SET_AUTOCONNECT = CommandType(
        "GPCAMERA_SENSOR_SET_AUTOCONNECT",
        "",
        "button",
        "Set the auto-connect state of the camera")

    GPCAMERA_SENSOR_SET_PAIRING_PHASE = CommandType(
        "GPCAMERA_SENSOR_SET_PAIRING_PHASE",
        "",
        "button",
        "Enter or exit pairing phase")

    GPCAMERA_SENSOR_WHITELIST = CommandType(
        "GPCAMERA_SENSOR_WHITELIST",
        "",
        "button",
        "Get the whitelist of sensors")

    GPCAMERA_SENSOR_WHITELIST_CONFIGURE = CommandType(
        "GPCAMERA_SENSOR_WHITELIST_CONFIGURE",
        "",
        "button",
        "Configure a whitelisted sensor")

    GPCAMERA_SENSOR_WHITELIST_DEVICE_INFO = CommandType(
        "GPCAMERA_SENSOR_WHITELIST_DEVICE_INFO",
        "",
        "button",
        "Get the whitelist info for a single sensor")

    GPCAMERA_SENSOR_WHITELIST_REMOVE = CommandType(
        "GPCAMERA_SENSOR_WHITELIST_REMOVE",
        "",
        "button",
        "Remove a sensor from the whitelist")

    GPCAMERA_SESSION_LIST = CommandType(
        "GPCAMERA_SESSION_LIST",
        "",
        "button",
        "Listing of session files on SD card")

    GPCAMERA_SET_DATE_AND_TIME_ID = CommandType(
        "GPCAMERA_SET_DATE_AND_TIME_ID",
        "/command/setup/date_time",
        "button",
        "Set Date and Time")

    GPCAMERA_SET_WIFI_CONFIG_V2 = CommandType(
        "GPCAMERA_SET_WIFI_CONFIG_V2",
        "",
        "button",
        "Set wifi SSID")

    GPCAMERA_SHUTTER = CommandType(
        "GPCAMERA_SHUTTER",
        "/command/shutter",
        "button",
        "Start or stop capture")

    GPCAMERA_SLEEP = CommandType(
        "GPCAMERA_SLEEP",
        "/command/system/sleep",
        "button",
        "Power Saving Sleep Mode")

    GPCAMERA_SSID_DELETE = CommandType(
        "GPCAMERA_SSID_DELETE",
        "/command/wireless/ssid/delete",
        "button",
        "Delete Wi-Fi SSID from Known List")

    GPCAMERA_SSID_LIST = CommandType(
        "GPCAMERA_SSID_LIST",
        "/command/wireless/ssid/list",
        "button",
        "Wi-Fi SSID Scan Results")

    GPCAMERA_SSID_SAVE = CommandType(
        "GPCAMERA_SSID_SAVE",
        "/command/wireless/ssid/save",
        "button",
        "Save Wi-Fi SSID to Known List")

    GPCAMERA_SSID_SCAN = CommandType(
        "GPCAMERA_SSID_SCAN",
        "/command/wireless/ssid/scan",
        "button",
        "Start Wi-Fi SSID Scan")

    GPCAMERA_SSID_SELECT = CommandType(
        "GPCAMERA_SSID_SELECT",
        "/command/wireless/ssid/select",
        "button",
        "Connect to Wi-Fi SSID")

    GPCAMERA_SUBMODE = CommandType(
        "GPCAMERA_SUBMODE",
        "/command/sub_mode",
        "button",
        "Set Mode and Sub-Mode")

    GPCAMERA_TAG_MOMENT = CommandType(
        "GPCAMERA_TAG_MOMENT",
        "/command/storage/tag_moment",
        "button",
        "Tag Moment")

    GPCAMERA_TURBO_MODE_ENABLE = CommandType(
        "GPCAMERA_TURBO_MODE_ENABLE",
        "",
        "button",
        "Enable camera turbo mode")

    GPCAMERA_USE_CURRENT_WIRELESS_REMOTE_ID = CommandType(
        "GPCAMERA_USE_CURRENT_WIRELESS_REMOTE_ID",
        "/setting/63/2",
        "button",
        "Use with Current Wi-Fi Remote")

    GPCAMERA_USE_NEW_WIRELESS_REMOTE_ID = CommandType(
        "GPCAMERA_USE_NEW_WIRELESS_REMOTE_ID",
        "/command/wireless/rc/pair",
        "button",
        "Use with New Wi-Fi Remote")

    GPCAMERA_VIDEO_PROTUNE_RESET_TO_DEFAULT = CommandType(
        "GPCAMERA_VIDEO_PROTUNE_RESET_TO_DEFAULT",
        "/command/video/protune/reset",
        "button",
        "Reset Protune")

    GPCAMERA_WIRELESS_PAIRING_COMPLETE = CommandType(
        "GPCAMERA_WIRELESS_PAIRING_COMPLETE",
        "",
        "button",
        "Sets the camera's connection setup state to success or failed")

    GPCAMERA_WIRELESS_SELECT_BAND = CommandType(
        "GPCAMERA_WIRELESS_SELECT_BAND",
        "",
        "button",
        "Sets the camera's Wifi band to 2.4GHz or 5GHz")


class Mode(Enum):
    video = '0'
    photo = '1'
    multi_shot = '2'
    broadcast = '3'
    playback = '4'
    setup = '5'
    audio = '6'


class SubMode(object):

    class Video(Enum):
        video = '0'
        time_lapse_video = '1'
        looping = '3'
        time_warp_video = '4'

    class Photo(Enum):
        single = '0'
        continuous = '1'
        night = '2'

    class MultiShot(Enum):
        burst = '0'
        time_lapse_photo = '1'
        night_lapse = '2'

    class Broadcast(Enum):
        record_plus_broadcast = '0'
        broadcast = '1'


class Video(object):

    RESOLUTION = '2'

    class Resolution(Enum):
        res_4k = '1'
        res_2_7k = '4'
        res_2_7k_4to3 = '6'
        res_1440 = '7'
        res_1080 = '9'
        res_960 = '10'
        res_720 = '12'
        res_4k_4to3 = '18'

    FPS = '3'

    class Fps(Enum):
        fps_240 = '0'
        fps_120 = '1'
        fps_100 = '2'
        fps_90 = '3'
        fps_80 = '4'
        fps_60 = '5'
        fps_50 = '6'
        fps_48 = '7'
        fps_30 = '8'
        fps_25 = '9'
        fps_24 = '10'
        fps_15 = '11'
        fps_12_5 = '12'
        fps_200 = '13'

    FOV = '4'

    class Fov(Enum):
        wide = '0'
        superview = '3'
        linear = '4'

    TIMELAPSERATE = '5'

    class TimelapseRate(Enum):
        rate_0_5_seconds = '0'
        rate_1_second = '1'
        rate_2_seconds = '2'
        rate_5_seconds = '3'
        rate_10_seconds = '4'
        rate_30_seconds = '5'
        rate_60_seconds = '6'

    LOOPING = '6'

    class Looping(Enum):
        time_max = '0'
        time_5_minutes = '1'
        time_20_minutes = '2'
        time_60_minutes = '3'
        time_120_minutes = '4'

    LOWLIGHT = '8'

    class LowLight(Enum):
        off = '0'
        on = '1'

    PROTUNE = '10'

    class Protune(Enum):
        off = '0'
        on = '1'

    PROTUNEWHITEBALANCE = '11'

    class ProtuneWhiteBalance(Enum):
        color_auto = '0'
        color_5500k = '2'
        color_6500k = '3'
        color_native = '4'
        color_4000k = '5'
        color_6000k = '7'
        color_2300k = '8'
        color_2800k = '9'
        color_3200k = '10'
        color_4500k = '11'
        color_5000k = '12'

    PROTUNECOLOR = '12'

    class ProtuneColor(Enum):
        gopro = '0'
        flat = '1'

    PROTUNEISO = '13'

    class ProtuneIso(Enum):
        iso_6400 = '0'
        iso_1600 = '1'
        iso_400 = '2'
        iso_3200 = '3'
        iso_800 = '4'
        iso_200 = '7'
        iso_100 = '8'

    PROTUNESHARPNESS = '14'

    class ProtuneSharpness(Enum):
        high = '0'
        medium = '1'
        low = '2'

    PROTUNEEV = '15'

    class ProtuneEv(Enum):
        ev_2_0 = '0'
        ev_1_5 = '1'
        ev_1_0 = '2'
        ev_0_5 = '3'
        ev_0_0 = '4'
        ev_neg_0_5 = '5'
        ev_neg_1_0 = '6'
        ev_neg_1_5 = '7'
        ev_neg_2_0 = '8'

    CURRENTSUBMODE = '68'

    class CurrentSubMode(Enum):
        video = '0'
        time_lapse_video = '1'
        looping = '3'
        time_warp_video = '4'

    EXPOSURETIME = '73'

    class ExposureTime(Enum):
        time_auto = '0'
        time_1_in_12_5 = '1'
        time_1_in_15 = '2'
        time_1_in_24 = '3'
        time_1_in_25 = '4'
        time_1_in_30 = '5'
        time_1_in_48 = '6'
        time_1_in_50 = '7'
        time_1_in_60 = '8'
        time_1_in_80 = '9'
        time_1_in_90 = '10'
        time_1_in_96 = '11'
        time_1_in_100 = '12'
        time_1_in_120 = '13'
        time_1_in_160 = '14'
        time_1_in_180 = '15'
        time_1_in_192 = '16'
        time_1_in_200 = '17'
        time_1_in_240 = '18'
        time_1_in_320 = '19'
        time_1_in_360 = '20'
        time_1_in_400 = '21'
        time_1_in_480 = '22'
        time_1_in_960 = '23'
        time_1_in_1920 = '24'
        time_1_in_384 = '25'
        time_1_in_640 = '26'
        time_1_in_720 = '27'
        time_1_in_800 = '28'
        time_1_in_1600 = '29'
        time_1_in_3200 = '30'
        time_1_in_3840 = '31'

    EIS = '78'

    class Eis(Enum):
        off = '0'
        on = '1'

    NOAUDIO = '96'

    class NoAudio(Enum):
        off = '0'
        on = '1'

    PROTUNEISOMIN = '102'

    class ProtuneIsoMin(Enum):
        iso_6400 = '0'
        iso_1600 = '1'
        iso_400 = '2'
        iso_3200 = '3'
        iso_800 = '4'
        iso_200 = '7'
        iso_100 = '8'

    SHORTCLIPLENGTH = '107'

    class ShortClipLength(Enum):
        length_off = '0'
        length_15_seconds = '1'
        length_30_seconds = '2'

    ASPECTRATIO = '108'

    class AspectRatio(Enum):
        aspect_4to3 = '0'
        aspect_16to9 = '1'

    TIMEWARPSPEED = '111'

    class TimewarpSpeed(Enum):
        speed_15x = '0'
        speed_30x = '1'
        speed_2x = '7'
        speed_5x = '8'
        speed_10x = '9'


class Photo(object):

    RESOLUTION = '17'

    class Resolution(Enum):
        res_wide = '0'
        res_linear = '10'

    EXPOSURETIME = '19'

    class ExposureTime(Enum):
        time_auto = '0'
        time_2_seconds = '1'
        time_5_seconds = '2'
        time_10_seconds = '3'
        time_15_seconds = '4'
        time_20_seconds = '5'
        time_30_seconds = '6'

    PROTUNE = '21'

    class Protune(Enum):
        off = '0'
        on = '1'

    PROTUNEWHITEBALANCE = '22'

    class ProtuneWhiteBalance(Enum):
        color_auto = '0'
        color_5500k = '2'
        color_6500k = '3'
        color_native = '4'
        color_4000k = '5'
        color_6000k = '7'
        color_2300k = '8'
        color_2800k = '9'
        color_3200k = '10'
        color_4500k = '11'
        color_5000k = '12'

    PROTUNECOLOR = '23'

    class ProtuneColor(Enum):
        gopro = '0'
        flat = '1'

    PROTUNEISO = '24'

    class ProtuneIso(Enum):
        iso_800 = '0'
        iso_400 = '1'
        iso_200 = '2'
        iso_100 = '3'
        iso_1600 = '4'
        iso_3200 = '5'

    PROTUNESHARPNESS = '25'

    class ProtuneSharpness(Enum):
        high = '0'
        medium = '1'
        low = '2'

    PROTUNEEV = '26'

    class ProtuneEv(Enum):
        ev_2_0 = '0'
        ev_1_5 = '1'
        ev_1_0 = '2'
        ev_0_5 = '3'
        ev_0_0 = '4'
        ev_neg_0_5 = '5'
        ev_neg_1_0 = '6'
        ev_neg_1_5 = '7'
        ev_neg_2_0 = '8'

    CURRENTSUBMODE = '69'

    class CurrentSubMode(Enum):
        single = '0'
        continuous = '1'
        night = '2'

    PROTUNEISOMIN = '75'

    class ProtuneIsoMin(Enum):
        iso_800 = '0'
        iso_400 = '1'
        iso_200 = '2'
        iso_100 = '3'
        iso_1600 = '4'
        iso_3200 = '5'

    SINGLERAW = '82'

    class SingleRaw(Enum):
        off = '0'
        on = '1'

    PROTUNEEXPOSURETIME = '97'

    class ProtuneExposureTime(Enum):
        time_auto = '0'
        time_1_in_125 = '1'
        time_1_in_250 = '2'
        time_1_in_500 = '3'
        time_1_in_1000 = '4'
        time_1_in_2000 = '5'

    NIGHTRAW = '98'

    class NightRaw(Enum):
        off = '0'
        on = '1'

    CAPTUREDELAY = '105'

    class CaptureDelay(Enum):
        delay_none = '0'
        delay_3_seconds = '1'
        delay_10_seconds = '2'

    SINGLESUPERPHOTO = '109'

    class SingleSuperPhoto(Enum):
        off = '0'
        auto = '1'
        hdr_only = '2'


class MultiShot(object):

    RESOLUTION = '28'

    class Resolution(Enum):
        res_wide = '0'
        res_linear = '10'

    BURSTRATE = '29'

    class BurstRate(Enum):
        rate_3_photos_in_1_second = '0'
        rate_5_photos_in_1_second = '1'
        rate_10_photos_in_1_second = '2'
        rate_10_photos_in_2_seconds = '3'
        rate_10_photos_in_3_seconds = '4'
        rate_30_photos_in_1_second = '5'
        rate_30_photos_in_2_seconds = '6'
        rate_30_photos_in_3_seconds = '7'
        rate_30_photos_in_6_seconds = '8'
        rate_auto = '9'

    TIMELAPSERATE = '30'

    class TimelapseRate(Enum):
        rate_1_photo_in_0_5_sec = '0'
        rate_1_photo_in_1_sec = '1'
        rate_1_photo_in_2_sec = '2'
        rate_1_photo_in_5_sec = '5'
        rate_1_photo_in_10_sec = '10'
        rate_1_photo_in_30_sec = '30'
        rate_1_photo_in_60_sec = '60'

    EXPOSURETIME = '31'

    class ExposureTime(Enum):
        time_auto = '0'
        time_2_seconds = '1'
        time_5_seconds = '2'
        time_10_seconds = '3'
        time_15_seconds = '4'
        time_20_seconds = '5'
        time_30_seconds = '6'

    NIGHTLAPSERATE = '32'

    class NightlapseRate(Enum):
        rate_4_seconds = '4'
        rate_5_seconds = '5'
        rate_10_seconds = '10'
        rate_15_seconds = '15'
        rate_20_seconds = '20'
        rate_30_seconds = '30'
        rate_1_minute = '60'
        rate_2_minutes = '120'
        rate_5_minutes = '300'
        rate_30_minutes = '1800'
        rate_60_minutes = '3600'
        rate_auto = '3601'

    PROTUNE = '34'

    class Protune(Enum):
        off = '0'
        on = '1'

    PROTUNEWHITEBALANCE = '35'

    class ProtuneWhiteBalance(Enum):
        color_auto = '0'
        color_5500k = '2'
        color_6500k = '3'
        color_native = '4'
        color_4000k = '5'
        color_6000k = '7'
        color_2300k = '8'
        color_2800k = '9'
        color_3200k = '10'
        color_4500k = '11'
        color_5000k = '12'

    PROTUNECOLOR = '36'

    class ProtuneColor(Enum):
        gopro = '0'
        flat = '1'

    PROTUNEISO = '37'

    class ProtuneIso(Enum):
        iso_800 = '0'
        iso_400 = '1'
        iso_200 = '2'
        iso_100 = '3'
        iso_1600 = '4'
        iso_3200 = '5'

    PROTUNESHARPNESS = '38'

    class ProtuneSharpness(Enum):
        high = '0'
        medium = '1'
        low = '2'

    PROTUNEEV = '39'

    class ProtuneEv(Enum):
        ev_2_0 = '0'
        ev_1_5 = '1'
        ev_1_0 = '2'
        ev_0_5 = '3'
        ev_0_0 = '4'
        ev_neg_0_5 = '5'
        ev_neg_1_0 = '6'
        ev_neg_1_5 = '7'
        ev_neg_2_0 = '8'

    CURRENTSUBMODE = '70'

    class CurrentSubMode(Enum):
        burst = '0'
        time_lapse_photo = '1'
        night_lapse = '2'

    PROTUNEISOMIN = '76'

    class ProtuneIsoMin(Enum):
        iso_800 = '0'
        iso_400 = '1'
        iso_200 = '2'
        iso_100 = '3'
        iso_1600 = '4'
        iso_3200 = '5'

    TIMELAPSERAW = '94'

    class TimelapseRaw(Enum):
        off = '0'
        on = '1'

    NIGHTLAPSERAW = '99'

    class NightlapseRaw(Enum):
        off = '0'
        on = '1'

    CAPTUREDELAY = '105'

    class CaptureDelay(Enum):
        delay_none = '0'
        delay_3_seconds = '1'
        delay_10_seconds = '2'


class Broadcast(object):

    RESOLUTION = '41'

    class Resolution(Enum):
        res_4k = '1'
        res_4k_superview = '2'
        res_2_7k = '4'
        res_2_7k_superview = '5'
        res_2_7k_4to3 = '6'
        res_1440 = '7'
        res_1080_superview = '8'
        res_1080 = '9'
        res_960 = '10'
        res_720_superview = '11'
        res_720 = '12'
        res_wvga = '13'
        res_2_7k_1to1 = '14'
        res_1_5k_1to1 = '15'
        res_pano_1to1 = '16'
        res_480 = '17'
        res_4k_4to3 = '18'

    FPS = '42'

    class Fps(Enum):
        fps_240 = '0'
        fps_120 = '1'
        fps_100 = '2'
        fps_90 = '3'
        fps_80 = '4'
        fps_60 = '5'
        fps_50 = '6'
        fps_48 = '7'
        fps_30 = '8'
        fps_25 = '9'
        fps_24 = '10'
        fps_15 = '11'
        fps_12_5 = '12'
        fps_200 = '13'

    FOV = '43'

    class Fov(Enum):
        wide = '0'
        medium = '1'
        narrow = '2'

    RECORDRESOLUTION = '44'

    class RecordResolution(Enum):
        r_4k = '1'
        r_4k_superview = '2'
        r_2_7k = '4'
        r_2_7k_superview = '5'
        r_2_7k_4to3 = '6'
        r_1440 = '7'
        r_1080_superview = '8'
        r_1080 = '9'
        r_960 = '10'
        r_720_superview = '11'
        r_720 = '12'
        r_wvga = '13'
        r_2_7k_1to1 = '14'
        r_1_5k_1to1 = '15'
        r_pano_1to1 = '16'
        r_480 = '17'
        r_4k_4to3 = '18'

    RECORDFPS = '45'

    class RecordFps(Enum):
        fps_240 = '0'
        fps_120 = '1'
        fps_100 = '2'
        fps_90 = '3'
        fps_80 = '4'
        fps_60 = '5'
        fps_50 = '6'
        fps_48 = '7'
        fps_30 = '8'
        fps_25 = '9'
        fps_24 = '10'
        fps_15 = '11'
        fps_12_5 = '12'
        fps_200 = '13'

    RECORDFOV = '46'

    class RecordFov(Enum):
        wide = '0'
        medium = '1'
        narrow = '2'

    WINDOWSIZE = '47'

    class WindowSize(Enum):
        size_default = '0'
        size_240 = '1'
        size_240_3to4_subsample = '2'
        size_240_1to2_subsample = '3'
        size_480 = '4'
        size_480_3to4_subsample = '5'
        size_480_1to2_subsample = '6'
        size_720 = '7'
        size_720_3to4_subsample = '8'
        size_720_1to2_subsample = '9'

    PRIVACY = '48'

    class Privacy(Enum):
        ask = '0'
        public = '1'
        hidden = '2'

    GOPSIZE = '65'

    class GopSize(Enum):
        size_default = '0'
        size_3 = '3'
        size_4 = '4'
        size_8 = '8'
        size_15 = '15'
        size_30 = '30'

    IDRINTERVAL = '66'

    class IdrInterval(Enum):
        interval_default = '0'
        interval_1 = '1'
        interval_2 = '2'
        interval_4 = '4'

    BITRATE = '67'

    class BitRate(Enum):
        rate_250_kbps = '250000'
        rate_400_kbps = '400000'
        rate_600_kbps = '600000'
        rate_700_kbps = '700000'
        rate_800_kbps = '800000'
        rate_1_mbps = '1000000'
        rate_1_2_mbps = '1200000'
        rate_1_6_mbps = '1600000'
        rate_2_mbps = '2000000'
        rate_2_4_mbps = '2400000'
        rate_2_5_mbps = '2500000'
        rate_4_mbps = '4000000'

    CURRENTSUBMODE = '71'

    class CurrentSubMode(Enum):
        record_plus_broadcast = '0'
        broadcast = '1'


class Setup(object):

    LCDSLEEP = '51'

    class LcdSleep(Enum):
        sleep_never = '0'
        sleep_1_min = '1'
        sleep_2_min = '2'
        sleep_3_min = '3'

    QUICKCAPTURE = '54'

    class QuickCapture(Enum):
        off = '0'
        on = '1'

    VIDEOFORMAT = '57'

    class VideoFormat(Enum):
        ntsc = '0'
        pal = '1'

    AUTOPOWERDOWN = '59'

    class AutoPowerDown(Enum):
        off_never = '0'
        off_5_min = '4'
        off_15_min = '6'
        off_30_min = '7'

    STREAMGOPSIZE = '60'

    class StreamGopSize(Enum):
        size_default = '0'
        size_3 = '3'
        size_4 = '4'
        size_8 = '8'
        size_15 = '15'
        size_30 = '30'

    STREAMIDRINTERVAL = '61'

    class StreamIdrInterval(Enum):
        interval_default = '0'
        interval_1 = '1'
        interval_2 = '2'
        interval_4 = '4'

    STREAMBITRATE = '62'

    class StreamBitRate(Enum):
        rate_250_kbps = '250000'
        rate_400_kbps = '400000'
        rate_600_kbps = '600000'
        rate_700_kbps = '700000'
        rate_800_kbps = '800000'
        rate_1_mbps = '1000000'
        rate_1_2_mbps = '1200000'
        rate_1_6_mbps = '1600000'
        rate_2_mbps = '2000000'
        rate_2_4_mbps = '2400000'
        rate_2_5_mbps = '2500000'
        rate_4_mbps = '4000000'

    STREAMWINDOWSIZE = '64'

    class StreamWindowSize(Enum):
        size_default = '0'
        size_240 = '1'
        size_240_3to4_subsample = '2'
        size_240_1to2_subsample = '3'
        size_480 = '4'
        size_480_3to4_subsample = '5'
        size_480_1to2_subsample = '6'
        size_720 = '7'
        size_720_3to4_subsample = '8'
        size_720_1to2_subsample = '9'

    GPS = '83'

    class Gps(Enum):
        off = '0'
        on = '1'

    LANGUAGE = '84'

    class Language(Enum):
        english = '0'
        chinese = '1'
        german = '2'
        italian = '3'
        spanish = '4'
        japanese = '5'
        french = '6'
        korean = '7'
        portuguese = '8'
        russian = '9'

    VOICECONTROLLANGUAGE = '85'

    class VoiceControlLanguage(Enum):
        english_neg_us = '0'
        english_neg_uk = '1'
        english_neg_aus = '2'
        german = '3'
        french = '4'
        italian = '5'
        spanish = '6'
        spanish_neg_na = '7'
        chinese = '8'
        japanese = '9'
        korean = '10'
        portuguese = '11'
        russian = '12'
        english_neg_ind = '13'

    LOCALVOICECONTROL = '86'

    class LocalVoiceControl(Enum):
        off = '0'
        on = '1'

    BEEPVOLUMEV2 = '87'

    class BeepVolumeV2(Enum):
        mute = '0'
        low = '40'
        medium = '70'
        high = '100'

    LCDBRIGHTNESSV2 = '88'

    class LcdBrightnessV2(Enum):
        percent_10 = '10'
        percent_20 = '20'
        percent_30 = '30'
        percent_40 = '40'
        percent_50 = '50'
        percent_60 = '60'
        percent_70 = '70'
        percent_80 = '80'
        percent_90 = '90'
        percent_100 = '100'

    DEFAULTAPPMODEFLAT = '89'

    class DefaultAppModeFlat(Enum):
        video_mode = '0'
        photo_mode = '1'
        multi_neg_shot_mode = '2'
        broadcast_mode = '3'
        playback = '4'
        setup = '5'
        fw_update = '6'
        usb_mtp = '7'
        sos = '8'
        medit = '9'
        calibration = '10'
        direct_offload = '11'
        video = '12'
        time_lapse_video = '13'
        video_plus_photo = '14'
        looping = '15'
        single_photo = '16'
        photo = '17'
        night_photo = '18'
        burst_photo = '19'
        time_lapse_photo = '20'
        night_lapse_photo = '21'
        broadcast_record = '22'
        broadcast = '23'
        time_warp_video = '24'

    LEDV2 = '91'

    class LedV2(Enum):
        off = '0'
        front_off = '1'
        on = '2'

    CURRENTFLATMODE = '92'

    class CurrentFlatMode(Enum):
        video_mode = '0'
        photo_mode = '1'
        multi_neg_shot_mode = '2'
        broadcast_mode = '3'
        playback = '4'
        setup = '5'
        fw_update = '6'
        usb_mtp = '7'
        sos = '8'
        medit = '9'
        calibration = '10'
        direct_offload = '11'
        video = '12'
        time_lapse_video = '13'
        video_plus_photo = '14'
        looping = '15'
        single_photo = '16'
        photo = '17'
        night_photo = '18'
        burst_photo = '19'
        time_lapse_photo = '20'
        night_lapse_photo = '21'
        broadcast_record = '22'
        broadcast = '23'
        time_warp_video = '24'

    ACCMICMODE = '95'

    class AccMicMode(Enum):
        none = '0'
        standard_mic = '1'
        standard_mic_plus_ = '2'
        powered_mic = '3'
        powered_mic_plus_ = '4'
        line_in = '5'

    AUTOSCREENLOCK = '103'

    class AutoScreenLock(Enum):
        off = '3'
        on = '5'

    WAKEONVOICE = '104'

    class WakeOnVoice(Enum):
        off = '0'
        on = '1'

    VIDEOCOMPRESSION = '106'

    class VideoCompression(Enum):
        compatible = '0'
        hevc = '1'

    LANDSCAPELOCK = '112'

    class LandscapeLock(Enum):
        off = '0'
        up = '1'
        down = '2'


class Audio(object):

    OPTION = '80'

    class Option(Enum):
        stereo_only = '0'
        wind_only = '1'
        auto = '2'

    PROTUNEOPTION = '81'

    class ProtuneOption(Enum):
        low = '0'
        medium = '1'
        high = '2'
        off = '3'
